<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:compass="http://www.compass-project.org/schema/spring-core-config"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
        http://www.compass-project.org/schema/spring-core-config
		http://www.compass-project.org/schema/spring-compass-core-config-2.2.xsd">
	
	<bean class="org.broadleafcommerce.util.ApplicationContextHolder" />
		
    <compass:compass name="compass" txManager="blTransactionManager">
    	<compass:connection>
    	    <compass:file path="c:/dev/compass-index" />
<!--    		<compass:ram path="/compass-index" />-->
    		<!-- Using an in memory map is fast and easily configurable  -->
    		<!-- Using something on the filesystem is probably better in real circumstances (storing a large index
    			in memory is less than ideal on the same machine as the app server
    			<compass:file path="/tmp/compass-index" />
    		-->
    	</compass:connection>
    	<compass:searchEngine>
    	    <compass:analyzer name="default" type="Standard" />
            <compass:analyzer name="search" type="Standard" />
    	<!--
    		<compass:analyzer name="default" type="Standard" filters="synonymFilter" />

    		<compass:analyzerFilter name="synonymFilter" type="synonym">
    			<compass:setting name="lookup"
    				value="org.broadleafcommerce.search.service.SearchSynonymProvider" />
    		</compass:analyzerFilter>

			-->
    	</compass:searchEngine>
    	<compass:osem/>
    	<compass:mappings>
            <compass:scan
                    basePackage="com.probuild.retail.web.catalog.ext.domain" />
    	</compass:mappings>
    </compass:compass>

    <compass:session id="sess" />
    
    <compass:context />
    
	<bean id="compassSearchController" class="org.broadleafcommerce.search.web.SearchController">
		<property name="searchService" ref="blcSearchService"/>
	</bean>
	
<!--	<bean id="blcSearchServiceExt" class="org.broadleafcommerce.search.service.SearchServiceCompassImpl">-->
    <bean id="blcSearchService" class="com.probuild.retail.web.catalog.ext.service.SearchServiceCompassExtImpl">
		<property name="catalogService" ref="blCatalogServiceExt" />
	    <property name="searchInterceptDao" ref="blSearchInterceptDao" />
	    <property name="searchSynonymDao" ref="blSearchSynonymDao" />
	</bean>
    
    <!--  This job rebuilds the search index  -->
	<bean id="indexCreationJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="blcSearchService" />
		<property name="targetMethod" value="rebuildProductIndex" />
		<property name="concurrent" value="false" />
	</bean>
	
	<!--  For development purposes the index is rebuilt on server startup and repeated every half hour -->
	<bean id="indexCreationDevelopmentTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="indexCreationJob" />
	    <property name="startDelay" value="2" />
	    <!-- repeat interval is given in milliseconds -->
	    <property name="repeatInterval" value="1800000" />
	</bean>
	        
	<!-- In a production context, the index should be rebuilt during low load times and less frequently -->
    <!-- this example runs every morning at 3 AM -->
<!--	<bean id="indexCreationProductionTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">-->
<!--	    <property name="jobDetail" ref="indexCreationJob" />-->
<!--	    <property name="cronExpression" value="0 0/5 0 * * ?" />-->
<!--	</bean>-->
	  
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="indexCreationDevelopmentTrigger" />
				<!-- 
				<ref bean="indexCreationProductionTrigger" />
				 -->
			</list>
		</property>
	</bean>
	
	
</beans>